[{"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\index.js":"1","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\reportWebVitals.js":"2","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\App.js":"3","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\WordButton.js":"4","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\LivesDisplay.js":"5","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\words.js":"6","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\LevelDisplay.js":"7","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\VerticalBreak.js":"8","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\StartScreen.js":"9","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\EndScreen.js":"10"},{"size":219,"mtime":1610308984422,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":7084,"mtime":1610317146952,"results":"14","hashOfConfig":"12"},{"size":1741,"mtime":1610303846825,"results":"15","hashOfConfig":"12"},{"size":727,"mtime":1610288834772,"results":"16","hashOfConfig":"12"},{"size":22249,"mtime":1610307283667,"results":"17","hashOfConfig":"12"},{"size":387,"mtime":1610299753758,"results":"18","hashOfConfig":"12"},{"size":384,"mtime":1610299959008,"results":"19","hashOfConfig":"12"},{"size":1140,"mtime":1610384264176,"results":"20","hashOfConfig":"12"},{"size":1759,"mtime":1610384439210,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"vp0aca",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\index.js",[],["46","47"],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\reportWebVitals.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\App.js",["48","49","50"],"import React, { useState, useEffect } from 'react'; \nimport wordList from './words';\nimport './App.css';\nimport StartScreen from './components/StartScreen';\nimport EndScreen from './components/EndScreen';\nimport WordButton from './components/WordButton';\nimport LevelDisplay from './components/LevelDisplay';\nimport LivesDisplay from './components/LivesDisplay';\nimport VerticalBreak from './components/VerticalBreak';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\n\nconst statuses = {\n  promptSelection: 'Select the new word.',\n  wasCorrect: 'Nice!',\n  wasIncorrect: 'You\\'ve seen that before.',\n}\n\nconst root = document.documentElement;\nconst initWords = { seen: [], unseen: [...wordList] };\nconst initLevelState = { wordSelection: [], correctAnswer: ''};\n\nfunction App() {\n  const [currentScreen, setCurrentScreen] = useState('start');\n  const [currentLevel, setCurrentLevel] = useState();\n  const [highScore, setHighScore] = useState(localStorage.getItem('highScore') ?? 0);\n  const [previousHighScore, setPreviousHighScore] = useState(0);\n  const [levelsSinceLastMistake, setLevelsSinceLastMistake] = useState(0);\n  const [lives, setLives] = useState(3);\n  const [disableWordButtons, setDisableWordButtons] = useState(false);\n  const [moveWordsOutOfView, setMoveWordsOutOfView] = useState(false);\n  const [statusText, setStatusText] = useState(statuses.promptSelection);\n  const [words, setWords] = useState();\n  const [levelState, setLevelState] = useState();\n\n  function startGame() {\n    setCurrentLevel(0);\n    setLevelsSinceLastMistake(0);\n    setLives(3);\n    setDisableWordButtons(false);\n    setMoveWordsOutOfView(false);\n    setWords(initWords);\n    setLevelState(initLevelState);\n  }\n\n  function handleSelectWord(isCorrect) {\n    setDisableWordButtons(true);\n    if (isCorrect) {\n      setStatusText(statuses.wasCorrect);\n    } else {\n      setStatusText(statuses.wasIncorrect);\n      setLives(prevLives => prevLives - 1);\n    }\n    sweepAwayWords(isCorrect).then(() => updateWordState());\n  }\n\n  async function sweepAwayWords(isCorrect) {\n    setLevelsSinceLastMistake(prevState => isCorrect ? (prevState + 1) : 0);\n    let showResultDuration = 1600;\n    let sweepDuration = 400;\n    if (isCorrect) {\n      const denominator = Math.pow(1.25, levelsSinceLastMistake);\n      showResultDuration = 1000 + (600 / denominator);\n      sweepDuration = 250 + (150 / denominator)\n    }\n    root.style.setProperty('--word-sweep-duration', `${sweepDuration}ms`);\n    await sleep(showResultDuration);\n    setMoveWordsOutOfView(true);\n    await sleep(sweepDuration);\n  }\n\n  function updateWordState() {\n    setWords(prevWords => {\n      return {\n        seen: [...prevWords.seen, levelState.correctAnswer],\n        unseen: prevWords.unseen.filter(word => !levelState.wordSelection.includes(word))\n      }\n    })\n  } \n\n  // Updated word state triggers new level state. Or, if game over, ends the game.\n  useEffect(() => {\n    if (!words) return;\n    if (lives > 0 && words.unseen.length > 0) {\n      setLevelState(newLevelState());\n    } else {\n      endGame();\n    }\n  }, [words]);\n\n  // Updated level state triggers display of the next level. Or, if initialized, starts the game.\n  useEffect(() => {\n    if (!levelState) return;\n    if (levelState.wordSelection.length > 0) {\n      displayNextLevel();\n    } else if (levelState === initLevelState) {\n      setCurrentScreen('game');\n    }\n  }, [levelState])\n\n  // Ending the game saves the high score.\n  useEffect(() => {\n    if (currentScreen === 'end') {\n      saveHighScore();\n    }\n  }, [currentScreen])\n\n  function displayNextLevel() {\n    setCurrentLevel(prevState => prevState + 1);\n    setMoveWordsOutOfView(false);\n    setDisableWordButtons(false);\n    setStatusText(statuses.promptSelection);\n    document.activeElement.blur();\n    if (currentLevel === 1) root.style.setProperty('--word-shortcut-visibility', 'hidden');\n  }\n\n  function newLevelState() {\n    const unseenWord = randomItemFrom(words.unseen);\n\n    switch (words.seen.length) {\n      case 0:\n        return {\n          wordSelection: [unseenWord, null, null],\n          correctAnswer: unseenWord\n        }\n      case 1: \n        const options = shuffle([words.seen[0], unseenWord]);\n        return {\n          wordSelection: [...options, null],\n          correctAnswer: unseenWord\n        }\n      default:\n        const firstSeenWordIndex = randomIndexFrom(words.seen);\n        const firstSeenWord = words.seen[firstSeenWordIndex];\n        const seenWordsClone = words.seen.filter((word, index) => !(index === firstSeenWordIndex));\n        const secondSeenWord = randomItemFrom(seenWordsClone);\n        return {\n          wordSelection: shuffle([firstSeenWord, secondSeenWord, unseenWord]),\n          correctAnswer: unseenWord\n        }   \n    }\n  }\n\n  function saveHighScore() {\n    const prevBest = localStorage.getItem('highScore') ?? 0;\n    setPreviousHighScore(prevBest);\n    if (currentLevel > prevBest) {\n      localStorage.setItem('highScore', currentLevel);\n      setHighScore(currentLevel);\n    }\n  }\n\n  function endGame() {\n    setCurrentScreen('end');\n  }\n\n  let app;\n  if (currentScreen === 'start') {\n    app = (\n      <StartScreen \n        highScore={highScore}\n        onStart={startGame}\n      />\n    )\n  } else if (currentScreen === 'end') {\n    app = (\n      <EndScreen \n        score={currentLevel}\n        isMaxScore={words.unseen.length === 0}\n        highScore={previousHighScore}\n        onRestart={startGame}\n        seenWords={words.seen}\n      />\n    )\n  } else if (currentScreen === 'game') {\n    app = (\n      <div className=\"Screen\">\n        <LevelDisplay level={currentLevel} moveOutOfView={moveWordsOutOfView}/>\n        <VerticalBreak />\n        <LivesDisplay lives={lives}/>\n        <VerticalBreak />\n        {levelState.wordSelection.map((word, index) => (\n          <WordButton \n            key={index}\n            shortcut={index + 1}\n            word={word} \n            correctAnswer={levelState.correctAnswer}\n            onSelect={handleSelectWord}\n            disabled={disableWordButtons || word === null}\n            moveOutOfView={moveWordsOutOfView}\n          />\n        ))}\n        <VerticalBreak />\n        <div className=\"stylish-text\">{statusText}</div>\n      </div>\n    )\n  }\n\n  return (<>\n    <div className=\"App\">{app}</div>\n    <div className=\"sticky-footer\">\n      <div>by mangonaise</div>\n      <FontAwesomeIcon icon={faHeart} color=\"rgb(230, 101, 144)\"/>\n      <a href=\"https://github.com/mangonaise/word-memory-game\">github</a>\n      </div>\n    </>\n  );\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction randomIndexFrom(array) {\n  return Math.floor(Math.random() * array.length);\n}\n\nfunction randomItemFrom(array) {\n  return array[randomIndexFrom(array)];\n}\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport default App;","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\WordButton.js",["51","52"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport './WordButton.css';\r\n\r\nconst WordButton = ({ shortcut, word, correctAnswer, onSelect, disabled, moveOutOfView }) => {\r\n  const [animationState, setAnimationState] = useState('none');\r\n  \r\n  function selectThisWord() {\r\n    if (disabled) return;\r\n    const isCorrect = word === correctAnswer;\r\n    setAnimationState(isCorrect ? 'correct' : 'incorrect');\r\n    onSelect(isCorrect);\r\n  }\r\n  // The keyboard shortcut listener needs access to a ref, or else it will not have access to most recent props.\r\n  const selectThisWordRef = useRef(selectThisWord);\r\n\r\n  function checkShortcut(event) {\r\n    if (parseInt(event.key) === shortcut) {\r\n      selectThisWordRef.current();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keyup', checkShortcut);\r\n    return (() => document.removeEventListener('keyup', checkShortcut));\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setAnimationState('none');\r\n  }, [correctAnswer])\r\n\r\n  useEffect(() => {\r\n    selectThisWordRef.current = selectThisWord;\r\n  }, [disabled])\r\n\r\n  return(\r\n    <button \r\n      disabled={disabled && animationState === 'none'}\r\n      className={`${getStyleFromAnimationState(animationState)} ${moveOutOfView ? 'move-out-of-view' : 'move-into-view'}`} \r\n      onClick={selectThisWord}>\r\n      {word}\r\n      <div className=\"word-shortcut-key\">{shortcut}</div>\r\n    </button>\r\n  )\r\n}\r\n\r\nfunction getStyleFromAnimationState(state) {\r\n  let style = 'stylish-button word-button';\r\n  if (state === 'none') {\r\n    style += ' unselected-word';\r\n  } else {\r\n    style += ' animate-word';\r\n    style += state === 'correct' ? ' correct-word' : ' incorrect-word';\r\n  }\r\n  return style;\r\n}\r\n\r\nexport default WordButton;","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\LivesDisplay.js",[],["53","54"],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\words.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\LevelDisplay.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\VerticalBreak.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\StartScreen.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\EndScreen.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":89,"column":6,"nodeType":"61","endLine":89,"endColumn":13,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":99,"column":6,"nodeType":"61","endLine":99,"endColumn":18,"suggestions":"64"},{"ruleId":"59","severity":1,"message":"65","line":106,"column":6,"nodeType":"61","endLine":106,"endColumn":21,"suggestions":"66"},{"ruleId":"59","severity":1,"message":"67","line":25,"column":6,"nodeType":"61","endLine":25,"endColumn":8,"suggestions":"68"},{"ruleId":"59","severity":1,"message":"69","line":33,"column":6,"nodeType":"61","endLine":33,"endColumn":16,"suggestions":"70"},{"ruleId":"55","replacedBy":"71"},{"ruleId":"57","replacedBy":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'lives' and 'newLevelState'. Either include them or remove the dependency array.","ArrayExpression",["75"],"React Hook useEffect has a missing dependency: 'displayNextLevel'. Either include it or remove the dependency array.",["76"],"React Hook useEffect has a missing dependency: 'saveHighScore'. Either include it or remove the dependency array.",["77"],"React Hook useEffect has a missing dependency: 'checkShortcut'. Either include it or remove the dependency array.",["78"],"React Hook useEffect has a missing dependency: 'selectThisWord'. Either include it or remove the dependency array.",["79"],["73"],["74"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [lives, newLevelState, words]",{"range":"90","text":"91"},"Update the dependencies array to be: [displayNextLevel, levelState]",{"range":"92","text":"93"},"Update the dependencies array to be: [currentScreen, saveHighScore]",{"range":"94","text":"95"},"Update the dependencies array to be: [checkShortcut]",{"range":"96","text":"97"},"Update the dependencies array to be: [disabled, selectThisWord]",{"range":"98","text":"99"},[3154,3161],"[lives, newLevelState, words]",[3476,3488],"[displayNextLevel, levelState]",[3623,3638],"[currentScreen, saveHighScore]",[908,910],"[checkShortcut]",[1068,1078],"[disabled, selectThisWord]"]