[{"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\index.js":"1","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\reportWebVitals.js":"2","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\App.js":"3","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\WordButton.js":"4","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\LivesDisplay.js":"5","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\words.js":"6","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\LevelDisplay.js":"7","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\VerticalBreak.js":"8"},{"size":219,"mtime":1610054985510,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":4664,"mtime":1610245063304,"results":"12","hashOfConfig":"10"},{"size":1032,"mtime":1610239988079,"results":"13","hashOfConfig":"10"},{"size":697,"mtime":1610218197822,"results":"14","hashOfConfig":"10"},{"size":22249,"mtime":1610234931511,"results":"15","hashOfConfig":"10"},{"size":228,"mtime":1610243312122,"results":"16","hashOfConfig":"10"},{"size":154,"mtime":1610244974353,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"vp0aca",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\index.js",[],["36","37"],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\reportWebVitals.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\App.js",["38"],"import React, { useState, useEffect } from 'react'; \nimport wordList from './words';\nimport './App.css';\nimport WordButton from './components/WordButton';\nimport LevelDisplay from './components/LevelDisplay';\nimport LivesDisplay from './components/LivesDisplay';\nimport VerticalBreak from './components/VerticalBreak';\n\nconst statuses = {\n  promptSelection: 'Select the new word.',\n  wasCorrect: 'Nice!',\n  wasIncorrect: 'That\\'s not a new word.',\n}\n\nconst root = document.documentElement;\n\nfunction App() {\n  const [levelNumber, setLevelNumber] = useState(0);\n  const [levelsSinceLastMistake, setLevelsSinceLastMistake] = useState(0);\n  const [lives, setLives] = useState(3);\n  const [disableWordButtons, setDisableWordButtons] = useState(false);\n  const [moveWordsOutOfView, setMoveWordsOutOfView] = useState(false);\n  const [statusText, setStatusText] = useState(statuses.promptSelection);\n\n  const [words, setWords] = useState({\n    seen: [],\n    unseen: [...wordList]\n  });\n  const [levelState, setLevelState] = useState({\n    wordSelection: [],\n    correctAnswer: ''\n  });\n\n  function handleSelectWord(isCorrect) {\n    setDisableWordButtons(true);\n    if (isCorrect) {\n      setStatusText(statuses.wasCorrect);\n    } else {\n      setStatusText(statuses.wasIncorrect);\n      setLives(prevLives => prevLives - 1);\n    }\n    sweepAwayWords(isCorrect).then(() => updateWordState());\n  }\n\n  async function sweepAwayWords(isCorrect) {\n    setLevelsSinceLastMistake(prevState => isCorrect ? (prevState + 1) : 0);\n    let showResultDuration = 1600;\n    let sweepDuration = 400;\n    if (isCorrect) {\n      const denominator = Math.pow(1.25, levelsSinceLastMistake);\n      showResultDuration = 1000 + (600 / denominator);\n      sweepDuration = 250 + (150 / denominator)\n    }\n    root.style.setProperty('--word-sweep-duration', `${sweepDuration}ms`);\n    await sleep(showResultDuration);\n    setMoveWordsOutOfView(true);\n    await sleep(sweepDuration);\n  }\n\n  function updateWordState() {\n    console.log(levelState.correctAnswer);\n    setWords(prevWords => {\n      return {\n        seen: [...prevWords.seen, levelState.correctAnswer],\n        unseen: prevWords.unseen.filter(word => !levelState.wordSelection.includes(word))\n      }\n    })\n  } // Updated word state triggers display of next level...\n\n  function displayNextLevel() {\n    setLevelNumber(prevState => prevState + 1);\n    setMoveWordsOutOfView(false);\n    setDisableWordButtons(false);\n    setStatusText(statuses.promptSelection);\n    document.activeElement.blur();\n  }\n\n  function newLevelState() {\n    const unseenWord = randomItemFrom(words.unseen);\n\n    switch (words.seen.length) {\n      case 0:\n        return {\n          wordSelection: [unseenWord, null, null],\n          correctAnswer: unseenWord\n        }\n      case 1: \n        const options = shuffle([words.seen[0], unseenWord]);\n        return {\n          wordSelection: [...options, null],\n          correctAnswer: unseenWord\n        }\n      default:\n        const firstSeenWordIndex = randomIndexFrom(words.seen);\n        const firstSeenWord = words.seen[firstSeenWordIndex];\n        const seenWordsClone = words.seen.filter((word, index) => !(index === firstSeenWordIndex));\n        const secondSeenWord = randomItemFrom(seenWordsClone);\n        return {\n          wordSelection: shuffle([firstSeenWord, secondSeenWord, unseenWord]),\n          correctAnswer: unseenWord\n        }   \n    }\n  }\n\n  useEffect(() => {\n    setLevelState(newLevelState());\n  }, [words]);\n\n  useEffect(() => {\n    if (levelState.wordSelection.length > 0) {\n      displayNextLevel();\n    }\n  }, [levelState])\n\n  return (\n    <div className=\"App\">\n      <LevelDisplay level={levelNumber} />\n      <VerticalBreak />\n      <LivesDisplay lives={lives}/>\n      <VerticalBreak />\n      {levelState.wordSelection.map((word, index) => (\n        <WordButton \n          key={index}\n          word={word} \n          correctAnswer={levelState.correctAnswer}\n          onSelect={handleSelectWord}\n          disabled={disableWordButtons || word === null}\n          moveOutOfView={moveWordsOutOfView}\n        />\n      ))}\n      <VerticalBreak />\n      <div id=\"status-text\">{statusText}</div>\n    </div>\n  );\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction randomIndexFrom(array) {\n  return Math.floor(Math.random() * array.length);\n}\n\nfunction randomItemFrom(array) {\n  return array[randomIndexFrom(array)];\n}\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport default App;\n","C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\WordButton.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\LivesDisplay.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\words.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\LevelDisplay.js",[],"C:\\Users\\liam2\\Webdev\\Projects\\word-memory-game\\src\\components\\VerticalBreak.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":107,"column":6,"nodeType":"45","endLine":107,"endColumn":13,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'newLevelState'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [newLevelState, words]",{"range":"52","text":"53"},[3481,3488],"[newLevelState, words]"]